{"version":3,"sources":["logo.svg","AppBar.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","withStyles","head","backgroundColor","palette","info","main","common","white","body","fontSize","TableCell","action","hover","TableRow","createData","name","calories","fat","carbs","protein","rows","table","top","zIndex","width","display","margin","CustomizedTables","TableContainer","component","Paper","Table","TableHead","align","TableBody","map","row","key","scope","App","CssBaseline","Box","m","mt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28dbbef5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n  \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            News\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n  //  minWidth: '700',\n  },\n  head: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.common.white,\n    position: 'sticky',\n    top: '64px',\n\n  //  marginTop: '10px',\n    zIndex: '10', \n  },\n  root: {\n    width: '100%',\n //   width: 'auto', \n    display: 'table',\n    margin: '0px',\n //   overflowX: 'auto',\n  },\n\n}));\n\nexport default function CustomizedTables() {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper} className={classes.root}>\n      <Table className={classes.table} aria-label=\"customized table\" >\n        <TableHead >\n          <TableRow>\n            <TableCell className={classes.head}>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\" className={classes.head}>Calories</TableCell>\n            <TableCell align=\"right\" className={classes.head}>Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\" className={classes.head}>Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\" className={classes.head}>Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ButtonAppBar from'./AppBar';\nimport Box from \"@material-ui/core/Box\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport OriginalCRApp from './OriginalCRApp';\nimport CustomizedTables from './Table';\n\nconst tableData = [ ['1 Tél', 'Hóvirág', 'Fehér'],\n                    ['2 Tavasz', 'Orgona', 'Lila'],\n                    ['3 Nyár', 'Napraforgó', 'Sárga'],\n                    ['4 Ősz', 'Őszirózsa', 'Piros']];\nconst tableHeaders = ['Évszak', 'Virág', 'Szín'];\n\nfunction App() {\n  let appBarHeight = 0;\n  \n  return (\n    <>\n        <CssBaseline/>\n        <ButtonAppBar />\n\n        <Box m='20px' mt='80px'>\n           <CustomizedTables />\n        </Box>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}