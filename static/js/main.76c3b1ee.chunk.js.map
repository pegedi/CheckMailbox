{"version":3,"sources":["AppBar.js","Table.js","App.js","jsonp.js","downloadToFile.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","ButtonAppBar","inquiryPressed","downloadBtnClicked","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","Button","button","startIcon","table","head","backgroundColor","palette","info","main","common","white","top","zIndex","width","display","margin","CustomizedTables","headerCells","dataRows","TableContainer","component","Paper","Table","TableHead","TableRow","key","map","item","itemIndex","TableCell","align","fieldName","TableBody","row","rowIndex","scope","reportName","subject","requestID","linkString","App","useState","setDataRows","CssBaseline","event","console","log","url","callback","callbackName","Math","round","random","window","data","document","body","removeChild","script","createElement","src","indexOf","appendChild","jsonp","response","fileText","dataRow","filename","text","aElement","blob","Blob","type","setAttribute","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","downloadfile2","stopPropagation","Box","m","mt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76c3b1ee.chunk.js","sourcesContent":["//https://codesandbox.io/s/j3j31qvq2v\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport CloudDownloadOutlinedIcon from '@material-ui/icons/CloudDownloadOutlined'; \n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonAppBar({inquiryPressed, downloadBtnClicked}) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton \n              edge=\"start\" \n              className={classes.menuButton} \n              color=\"inherit\" \n              aria-label=\"refresh\"\n              onClick={inquiryPressed} >\n            <RefreshIcon />\n          </IconButton>\n          <IconButton \n              edge=\"start\" \n              className={classes.menuButton} \n              color=\"inherit\" \n              aria-label=\"info\" >\n            <InfoOutlinedIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            Oracle Reports\n          </Typography>\n          <Button \n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            startIcon={<CloudDownloadOutlinedIcon />}\n            onClick={downloadBtnClicked}\n          >\n            \n            Download\n          </Button>\n        </Toolbar>\n      </AppBar>\n\n\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n  //  minWidth: '700',\n  },\n  head: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.common.white,\n    position: 'sticky',\n    top: '64px',\n\n  //  marginTop: '10px',\n    zIndex: '10', \n  },\n  root: {\n    width: '100%',\n //   width: 'auto', \n    display: 'table',\n    margin: '0px',\n //   overflowX: 'auto',\n  },\n\n}));\n\nexport default function CustomizedTables({headerCells, dataRows}) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper} className={classes.root}>\n      <Table className={classes.table} aria-label=\"customized table\" >\n        <TableHead >\n          <TableRow key=\"-1\">\n            {headerCells.map((item, itemIndex) => (<TableCell key={\"header/\" + itemIndex} \n                className={classes.head} align={item.align}>\n                {item.fieldName} </TableCell>))}\n            \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataRows.map((row, rowIndex) => (\n            <TableRow key={\"ROW/\" + rowIndex}>\n              <TableCell key={rowIndex+\"/1\"} component=\"th\" scope=\"row\">\n                {row.reportName}\n              </TableCell>\n              <TableCell key={rowIndex+\"/2\"}  align=\"left\">{row.subject}</TableCell>\n              <TableCell key={rowIndex+\"/3\"} align=\"left\">{row.requestID}</TableCell>\n              <TableCell key={rowIndex+\"/4\"} align=\"left\">{row.linkString}</TableCell>\n              <TableCell key={rowIndex+\"/5\"} align=\"left\">{row.requestID}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","import React, { useState } from 'react';\nimport './App.css';\nimport ButtonAppBar from'./AppBar';\nimport Box from \"@material-ui/core/Box\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CustomizedTables from './Table';\nimport jsonp from './jsonp';\nimport downloadfile2 from './downloadToFile';\n\nconst queryURL='https://script.google.com/macros/s/AKfycbzNEIVgweOKPUyS9rjAOePMG2fTcKy1YIj0V8cI_VpMTGQLuA3-/exec?query=label:orareport';\nconst queryDEVURL='https://script.google.com/macros/s/AKfycbymuFfnEq2Rw-KSq93_3u4qpKnFiOhQMn-uY2_3IdMo/dev?query=label:orareport';\n\nconst headerCells = [{fieldName: \"Report Name\", align: \"left\"},\n                {fieldName: \"Subject\", align: \"left\"},\n                {fieldName: \"Request ID\", align: \"left\"},\n                {fieldName: \"Link\", align: \"left\"},\n                {fieldName: \"ThreadID\", align: \"left\"},]\n\nfunction App() {\n  const inquiryPressed = (event) => {\n    console.log('Refresh Started!');\n\n    jsonp(queryDEVURL, response => {setDataRows(response)});\n \n  };\n  \n  const downloadBtnClicked = (event) => {\n    console.log(\"buttonClicked function started\");\n    let fileText = \"Request ID|Subject|Report Name|Link\\r\\n\";\n    for (let dataRow of dataRows) {\n    fileText += dataRow.requestID + \"|\" + dataRow.subject + \"|\" + dataRow.reportName + \"|\" + dataRow.linkString +\"\\r\\n\";          \n    }\n\n    downloadfile2(\"emailDetails.txt\",fileText);\n//    $('#progress').html(\"File Downloaded\");\n\n    event.stopPropagation();\n    }\n  const [dataRows, setDataRows] = useState([]);\n\n  \n  return (\n    <>\n        <CssBaseline/>\n        <ButtonAppBar \n            inquiryPressed={inquiryPressed}\n            downloadBtnClicked={downloadBtnClicked}\n        />\n\n        <Box m='20px' mt='80px'>\n           <CustomizedTables \n                headerCells={headerCells} \n                dataRows={dataRows}/>\n        </Box>\n    </>\n  );\n}\n\nexport default App;\n","export default (url, callback) => {\n  var callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\n  window[callbackName] = function(data) {\n    delete window[callbackName];\n    document.body.removeChild(script);\n    callback(data);\n  };\n\n  var script = document.createElement('script');\n  script.src =\n    url + (url.indexOf('?') >= 0 ? '&' : '?') + 'prefix=' + callbackName;\n  document.body.appendChild(script);\n};","export default function downloadfile2(filename, text = \"egy meg egy\\r\\nkettő\\nhárom\"){\n//        alert (\"33\");\n        console.log(\"downloadfile2 function started\");\n        let aElement = document.createElement(\"a\");\n        let blob = new Blob([\"\\ufeff\",text], { type: \"text/plain;charset=ISO-8859-2\" });\n        aElement.setAttribute('href', window.URL.createObjectURL(blob));\n        aElement.setAttribute('download', filename);\n\n        if (document.createEvent) {\n          var event = document.createEvent('MouseEvents');\n          event.initEvent('click', true, true);\n          aElement.dispatchEvent(event);\n        } else {\n        aElement.click();\n        }\n        \n      }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}