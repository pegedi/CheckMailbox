{"version":3,"sources":["AppBar.js","Table.js","StatusBar.js","App.js","downloadToFile.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","ButtonAppBar","inquiryPressed","downloadBtnClicked","loginClicked","userName","isInProgress","classes","loginBtnText","console","log","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","disabled","Button","variant","button","Typography","startIcon","table","head","backgroundColor","palette","info","main","common","white","top","zIndex","width","display","margin","CustomizedTables","headerCells","dataRows","TableContainer","component","Paper","Table","TableHead","TableRow","key","map","item","itemIndex","TableCell","align","fieldName","TableBody","row","rowIndex","scope","reportName","subject","requestID","linkString","appBar","bottom","minHeight","toolBar","height","statusText","fontSize","statusBox","background","padding","StatusBar","props","Fragment","Box","message1","message2","DISCOVERY_DOCS","uName","AppProvider","useState","appUName","setAppUName","App","document","getElementById","script","createElement","src","setAttribute","onload","window","gapi","load","initClient","body","appendChild","setDataRows","setProgress","statusMessage","setStatusMessage","client","init","apiKey","process","clientId","discoveryDocs","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","error","currentProfile","currentUser","getBasicProfile","getName","CssBaseline","event","scripts","run","resp","result","status","details","errorMessage","scriptStackTraceElements","element","response","length","x","threadID","fileText","dataRow","filename","text","aElement","blob","Blob","type","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","downloadfile2","stopPropagation","signOut","signIn","style","left","CircularProgress","m","mt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.66c4a61d.chunk.js","sourcesContent":["//https://codesandbox.io/s/j3j31qvq2v\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport CloudDownloadOutlinedIcon from '@material-ui/icons/CloudDownloadOutlined'; \n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonAppBar({inquiryPressed, downloadBtnClicked, loginClicked, \n                                      userName, isInProgress}) {\n  const classes = useStyles();\n  const loginBtnText = userName ? 'Logout' : 'Login';\n  console.log('function ButtonAppBar: ');\n  console.log(userName);\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton \n              edge=\"start\" \n              className={classes.menuButton} \n              color=\"inherit\" \n              aria-label=\"refresh\"\n              onClick={inquiryPressed}\n              disabled={isInProgress} >\n            <RefreshIcon />\n          </IconButton>\n          <IconButton \n              edge=\"start\" \n              className={classes.menuButton} \n              color=\"inherit\" \n              aria-label=\"info\"\n              disabled={isInProgress} >\n            <InfoOutlinedIcon />\n          </IconButton>\n          <Button \n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={loginClicked}\n            disabled={isInProgress}\n          >\n            {loginBtnText}\n          </Button>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            Oracle Reports\n          </Typography>\n          <Button \n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            startIcon={<CloudDownloadOutlinedIcon />}\n            onClick={downloadBtnClicked}\n            disabled={isInProgress}\n          >\n            \n            Download\n          </Button>\n        </Toolbar>\n      </AppBar>\n\n\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n  //  minWidth: '700',\n  },\n  head: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.common.white,\n    position: 'sticky',\n    top: '64px',\n\n  //  marginTop: '10px',\n    zIndex: '10', \n  },\n  root: {\n    width: '100%',\n //   width: 'auto', \n    display: 'table',\n    margin: '0px',\n //   overflowX: 'auto',\n  },\n\n}));\n\nexport default function CustomizedTables({headerCells, dataRows}) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper} className={classes.root}>\n      <Table className={classes.table} aria-label=\"customized table\" >\n        <TableHead >\n          <TableRow key=\"-1\">\n            {headerCells.map((item, itemIndex) => (<TableCell key={\"header/\" + itemIndex} \n                className={classes.head} align={item.align}>\n                {item.fieldName} </TableCell>))}\n            \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataRows.map((row, rowIndex) => (\n            <TableRow key={\"ROW/\" + rowIndex}>\n              <TableCell key={rowIndex+\"/1\"} component=\"th\" scope=\"row\">\n                {row.reportName}\n              </TableCell>\n              <TableCell key={rowIndex+\"/2\"}  align=\"left\">{row.subject}</TableCell>\n              <TableCell key={rowIndex+\"/3\"} align=\"left\">{row.requestID}</TableCell>\n              <TableCell key={rowIndex+\"/4\"} align=\"left\">{row.linkString}</TableCell>\n              <TableCell key={rowIndex+\"/5\"} align=\"left\">{row.requestID}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n \n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    minHeight: 0,\n  },\n  toolBar: {\n      height: 'auto',\n      minHeight: 0,\n  },\n  statusText: {\n      fontSize: 10,\n  },\n  statusBox: {\n      background: '#7777ff',\n      fontSize: '12px',\n      margin: '10px',\n      padding: '2px 10px',\n      display: 'inline',\n  }\n \n}));\n\nexport default function StatusBar(props) {\n  const classes = useStyles();\n\n  return (\n    \n      <React.Fragment>\n\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n\n        <Toolbar className={classes.toolBar} >\n            <Typography variant=\"subtitle\" >\n                <Box className={classes.statusBox}> \n                    {props.message1}\n                </Box>\n                {props.message2?<Box className={classes.statusBox}>{props.message2}</Box>:<></>}\n            </Typography>\n        </Toolbar>\n      </AppBar>\n      </React.Fragment>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ButtonAppBar from'./AppBar';\nimport Box from \"@material-ui/core/Box\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CustomizedTables from './Table';\n//import jsonp from './jsonp';\nimport downloadfile2 from './downloadToFile';\nimport StatusBar from './StatusBar';\nimport { CircularProgress } from '@material-ui/core';\nimport zIndex from '@material-ui/core/styles/zIndex';\n\nconst queryURL='https://script.google.com/macros/s/AKfycbzNEIVgweOKPUyS9rjAOePMG2fTcKy1YIj0V8cI_VpMTGQLuA3-/exec?query=label:orareport';\nconst queryDEVURL='https://script.google.com/macros/s/AKfycbymuFfnEq2Rw-KSq93_3u4qpKnFiOhQMn-uY2_3IdMo/dev?query=label:orareport';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID; \nconst DISCOVERY_DOCS = [\"https://script.googleapis.com/$discovery/rest?version=v1\"];\nvar SCOPES = 'https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/drive https://mail.google.com/';\n\n\nconst headerCells = [{fieldName: \"Report Name\", align: \"left\"},\n                {fieldName: \"Subject\", align: \"left\"},\n                {fieldName: \"Request ID\", align: \"left\"},\n                {fieldName: \"Link\", align: \"left\"},\n                {fieldName: \"ThreadID\", align: \"left\"},]\n\nlet uName = 'InitName';  \nexport const AppProvider = (props) => {\n    const [appUName, setAppUName] = useState(uName);\n    console.log(appUName);\n    return (\n        \n           <App \n             appUName={appUName}\n             setAppUName={setAppUName}\n           />\n    )\n}\nfunction App({appUName, setAppUName}) {\n   console.log('function app Started');\n\n   if (!document.getElementById('gapi_script')) {\n        let script = document.createElement('script');\n        script.src = 'https://apis.google.com/js/client.js'\n        script.setAttribute(\"id\", \"gapi_script\")\n        script.setAttribute(\"async\", \"\");\n        script.setAttribute(\"defer\",\"\");\n        script.onload = function() {\n            window.gapi.load('client:auth2', initClient);\n        } \n        \n     //   script.setAttribute(\"onload\", 'this.onload=function(){};handleClientLoad()');\n     //   script.setAttribute(\"onreadystatechange\",\"if (this.readyState === 'complete') this.onload()\");\n        document.body.appendChild(script);\n       // initClient();\n\n   }\n   \n   const [dataRows, setDataRows] = useState([]);\n   const [isInProgress, setProgress] = useState(false);\n   const [statusMessage, setStatusMessage] = useState(null);\n   //let dataRows = [];\n   \n \n     function initClient() {\n        window.gapi.client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        }).then(function () {\n            console.log(\"gapi.client.init went OK\");\n            window.gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n            \n            // Handle the initial sign-in state.\n            updateSigninStatus(window.gapi.auth2.getAuthInstance().isSignedIn.get());\n\n        }, function(error) {\n            console.log('gapi.client.init went wrong:');\n            console.log(error);\n        });\n      }\n   \n   \n   const updateSigninStatus = (isSignedIn) => {\n       console.log('function updateSigninStatus:');\n       console.log(isSignedIn);\n       if (isSignedIn) {\n          const currentProfile = window.gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\n          console.log(currentProfile.getName());\n          uName = currentProfile.getName();       \n        } else {\n          uName = null;\n        }\n        setAppUName(uName);\n        console.log(uName);\n\n   }\n\n   const loginClickedFunction = (event) => {\n      console.log(window.gapi.auth2.getAuthInstance().isSignedIn.get())\n      if (window.gapi.auth2.getAuthInstance().isSignedIn.get()) {\n        window.gapi.auth2.getAuthInstance().signOut();\n      } else {\n        window.gapi.auth2.getAuthInstance().signIn();\n\n      }\n      event.stopPropagation();\n   };\n\n    function callAppsScript() {\n        window.gapi.client.script.projects.create({\n            resource: {\n                title: 'My Script'\n            }\n        }).then((resp) => {\n            return window.gapi.client.script.projects.updateContent({\n                scriptId: resp.result.scriptId,\n                resource: {\n                    files: [{\n                        name: 'hello',\n                        type: 'SERVER_JS',\n                        source: 'function helloWorld() {\\n  console.log(\"Hello, world!\");\\n}'\n                        }, {\n                        name: 'appsscript',\n                        type: 'JSON',\n                        source: \"{\\\"timeZone\\\":\\\"America/New_York\\\",\\\"\" +\n                        \"exceptionLogging\\\":\\\"CLOUD\\\"}\"\n                    }]\n                }\n            });\n        }).then((resp) => {\n          let result = resp.result;\n          if (result.error) throw result.error;\n          console.log(`https://script.google.com/d/${result.scriptId}/edit`);\n        }).catch((error) => {\n          // The API encountered a problem.\n          return console.log(`The API returned an error: ${error}`);\n        });\n      }\n\n      function callLabelChange(){\n            const scriptId = '1_LCQKiOadsTyDbwJIGwN0jwyS9xJ3z-wDq_Pgk2P-wtpbJGX1EObhntl';\n            window.gapi.client.script.scripts.run({\n              'scriptId': scriptId,\n              'resource': {\n                  'function': 'emailLabelChange',\n                  'parameters': [dataRows.map(x => x.threadID)],\n                  \"devMode\": true\n              }\n            }).then(function(resp){\n                let result=resp.result;\n                if (result.error && result.error.status) {\n                    // The API encountered a problem before the script started executing.\n                    console.log('Error calling API:');\n                    console.log(result);\n                } else if (result.error) {\n                    // The API executed, but the script returned an error.\n\n                    // Extract the first (and only) set of error details.\n                    // The values of this object are the script's 'errorMessage' and\n                    // 'errorType', and an array of stack trace elements.\n                    let error = result.error.details[0];\n                    console.log(result.error);\n                    console.log('Script error message: ' + error.errorMessage);\n                    if (error.scriptStackTraceElements) {\n                        console.log('Script error stacktrace:')\n                        for (const element of error.scriptStackTraceElements) {\n                            console.log(element);\n                        }\n                    }\n                } else {\n                    // The structure of the result will depend upon what the Apps\n                    console.log(resp.result.response.result);\n                    setStatusMessage('Text File downloaded - ' + resp.result.response.result);\n                    setDataRows([]);\n                }\n                setProgress(false);\n            });  \n      }//function callLabelChange\n\n   function callScriptFunction0() {\n       const scriptId = '1_LCQKiOadsTyDbwJIGwN0jwyS9xJ3z-wDq_Pgk2P-wtpbJGX1EObhntl';\n       // Call the Apps Script API run method\n       //   'scriptId' is the URL parameter that states what script to run\n       //   'resource' describes the run request body (with the function name\n       //              to execute)\n\n       window.gapi.client.script.scripts.run({\n           'scriptId': scriptId,\n           'resource': {\n  //             'function': 'firstAPIFunction',\n//            'function': 'secondAPIfunction',\n//            'parameters': ['my parameter text'],\n                'function': 'lookupEmails',\n                'parameters': ['label:orareport'],\n                \"devMode\": true\n            }\n       }).then(function(resp){\n           let result=resp.result;\n           if (result.error && result.error.status) {\n                // The API encountered a problem before the script started executing.\n                console.log('Error calling API:');\n                console.log(result);\n            } else if (result.error) {\n                // The API executed, but the script returned an error.\n\n                // Extract the first (and only) set of error details.\n                // The values of this object are the script's 'errorMessage' and\n                // 'errorType', and an array of stack trace elements.\n                let error = result.error.details[0];\n                console.log(result.error);\n                console.log('Script error message: ' + error.errorMessage);\n\n                if (error.scriptStackTraceElements) {\n                    console.log('Script error stacktrace:')\n                    for (const element of error.scriptStackTraceElements) {\n                       console.log(element);\n                    }\n                }\n            } else {\n                // The structure of the result will depend upon what the Apps\n                console.log(resp.result.response.result);\n                setDataRows(resp.result.response.result);\n                setStatusMessage('Download is Ready - ' + resp.result.response.result.length + ' report(s) found');\n            }\n           setProgress(false);\n       })\n\n   }\n   const inquiryPressed = (event) => {\n    console.log('Refresh Started!');\n    setStatusMessage('Download in progress');\n    setProgress(true);\n    callScriptFunction0();\n//    jsonp(queryDEVURL, response => {setDataRows(response)});\n \n  };\n  \n  const downloadBtnClicked = (event) => {\n    console.log(\"buttonClicked function started\");\n    setStatusMessage('Textfile download in progress');\n    setProgress(true);\n    callLabelChange();\n    let fileText = \"Request ID|Subject|Report Name|Link\\r\\n\";\n    for (let dataRow of dataRows) {\n    fileText += dataRow.requestID + \"|\" + dataRow.subject + \"|\" + dataRow.reportName + \"|\" + dataRow.linkString +\"\\r\\n\";          \n    }\n\n    downloadfile2(\"emailDetails.txt\",fileText);\n    \n\n    event.stopPropagation();\n    }\n\n  \n  return (\n    <>\n        <CssBaseline/>\n        <ButtonAppBar \n            inquiryPressed={inquiryPressed}\n            downloadBtnClicked={downloadBtnClicked}\n            loginClicked={loginClickedFunction}\n            userName={appUName}\n            isInProgress={isInProgress}\n        />\n        {isInProgress?\n        <div style={{position: 'fixed', left: '50%', top: '50%', zIndex: 100, display: 'block' }}>\n                <CircularProgress />\n            </div>:<></>\n        }\n\n        <Box m='20px' mt='80px'>\n            \n            \n           <CustomizedTables \n                headerCells={headerCells} \n                dataRows={dataRows}/>\n        </Box>\n        <StatusBar\n            message1={'Username: ' + appUName} \n            message2={statusMessage}\n        />\n    </>\n  );\n}\n\nexport default App;\n\n","export default function downloadfile2(filename, text = \"egy meg egy\\r\\nkettő\\nhárom\"){\n//        alert (\"33\");\n        console.log(\"downloadfile2 function started\");\n        let aElement = document.createElement(\"a\");\n        let blob = new Blob([\"\\ufeff\",text], { type: \"text/plain;charset=ISO-8859-2\" });\n        aElement.setAttribute('href', window.URL.createObjectURL(blob));\n        aElement.setAttribute('download', filename);\n\n        if (document.createEvent) {\n          var event = document.createEvent('MouseEvents');\n          event.initEvent('click', true, true);\n          aElement.dispatchEvent(event);\n        } else {\n        aElement.click();\n        }\n        \n      }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App, AppProvider} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}